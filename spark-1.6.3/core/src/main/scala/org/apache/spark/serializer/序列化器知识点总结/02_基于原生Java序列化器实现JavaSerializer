基于Java原生序列化技术
1、序列化将对象及其状态转换为字节码持久化保存，以便通过文件、网络保存或传播，在适当时候再恢复其状态（反序列化）！
2、只有实现了Serializable和Externalizable接口的类的对象才能被序列化。
Serializable和Externalizable的区别：
(1)、Externalizable接口继承自Serializable接口，实现Externalizable接口的类完全由自身来控制序列化的行为，而仅实现Serializable接口的类可以采用默认的序列化方式。
(2)、实现Externalizable接口的类，必须有public的无参构造器，因为在这种序列化机制中需要构造器参与。
(3)、Externalizable序列化的速度更快，而且数据更小。实际证明：速度与Serializable差不多。

【JavaSerializer的实现】
class JavaSerializer(conf: SparkConf) extends Serializable with Externalizable {
  //spark.serializer.objectStreamReset = 100
  private var counterReset = 100
  // spark.serializer.extraDebugInfo = true
  private var extraDebugInfo = true

  protected def this() = this(new SparkConf())

  override def newInstance(): SerializerInstance = {
    val classLoader = defaultClassLoader.getOrElse(Thread.currentThread.getContextClassLoader)
    new JavaSerializerInstance(counterReset, extraDebugInfo, classLoader)
  }

  override def writeExternal(out: ObjectOutput): Unit = {
    out.writeInt(counterReset)
    out.writeBoolean(extraDebugInfo)
  }

  override def readExternal(in: ObjectInput): Unit = {
    counterReset = in.readInt()
    extraDebugInfo = in.readBoolean()

  }
}
【JavaSerializerInstance的实现】
class JavaSerializerInstance(counterReset: Int, extraDebugInfo: Boolean, defaultClassLoader: ClassLoader) extends SerializerInstance {
  override def serialize[T:ClassTag](t: T): ByteBuffer = {
    val bos = new ByteArrayOutputStream()
    val out = serializeStream(bos)
    out.writeObject(t)
    out.close()
    ByteBuffer.wrap(bos.toByteArray)
  }

  override def deserialize[T:ClassTag](bytes: ByteBuffer):T = {
     val bis = new ByteArrayInputStream(bytes)
     val in = deserializeStream(bis)
     in.readObject()
  }

  override def deserialize[T:ClassTag](bytes: ByteBuffer, classLoader:ClassLoader):T = {
     val bis = new ByteArrayInputStream(bytes)
     val in = deserializeStream(bis, classLoader)
     in.readObject()
  }
  override def serializeStream(s: OutputStream): SerializationStream = {
    new JavaSerializationStream(s, counterReset, extraDebugInfo)
  }

  override def deserializeStream(s: InputStream): DeserializationStream = {
    new JavaDeserializationStream(s, defaultClassLoader)
  }

  def deserializeStream(s: InputStream, loader: ClassLoader): DeserializationStream = {
    new JavaDeserializationStream(s, loader)
  }
}

【JavaSerializationStream的实现】
class JavaSerializationStream(out: OutputStream, counterReset: Int, extraDebugInfo: Boolean) extends SerializationStream {
  private val objOut = new ObjectOutputStream(out)
  private val counter = 0
  /**
   * Calling reset to avoid memory leak:
   * http://stackoverflow.com/questions/1281549/memory-leak-traps-in-the-java-standard-api
   * But only call it every 100th time to avoid bloated serialization streams (when
   * the stream 'resets' object class descriptions have to be re-written)
   */
  overrride def writeObject[T:ClassTag](t: T): SerializationStream = {
    try {
      objOut.writeObject(t)
    } catch {
      case e: NotSerializationException if extraDebugInfo =>
        e.printStackTrace()
    }
    counter += 1
    if(counterReset > 0 && counter >= counterReset) {
      objOut.reset()
      counter = 0
    }
    this
  }

  override def flush():Unit = {objOut.flush()}
  override def clost():Unit = {objOut.close()}
}

【JavaDeserializationStream的实现】
class JavaDeserializationStream(in: InputStream, classLoader: ClassLoader) extends DeserializationStream {
  val objIn = new ObjectInputStream(in) {
    override def resolveClass(desc: ObjectStreamClass): Class[_] = {
      try {
        Class.forName(desc.getName, false, loader)
      } catch {
        case e: ClassNotFoundException =>
          JavaDeserializationStream.primitiveMappings.get(desc.getName).getOrElse(throw e)
      }

    }
  }
  override def readObject[T:ClassTag]():T = objIn.readObject().asInstanceOf[T]
  override def clost():Unit = {objIn.close()}
}

object JavaDeserializationStream {
  val primitiveMappings = Map[String, Class[_]](
    "boolean" -> classOf[Boolean],
    "byte" -> classOf[Byte],
    "char" -> classOf[Char],
    "short" -> classOf[Short],
    "int" -> classOf[Int],
    "long" -> classOf[Long],
    "float" -> classOf[Float],
    "double" -> classOf[Double],
    "void" -> classOf[Void]
  )
}