#!/usr/bin/env bash

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file is sourced when running various Spark programs.
# Copy it as spark-env.sh and edit that to configure Spark for your site.

# Options read when launching programs locally with
# ./bin/run-example or ./bin/spark-submit
# - HADOOP_CONF_DIR, to point Spark towards Hadoop configuration files
# - SPARK_LOCAL_IP, to set the IP address Spark binds to on this node
# - SPARK_PUBLIC_DNS, to set the public dns name of the driver program
# - SPARK_CLASSPATH, default classpath entries to append

# Options read by executors and drivers running inside the cluster
# - SPARK_LOCAL_IP, to set the IP address Spark binds to on this node
# - SPARK_PUBLIC_DNS, to set the public DNS name of the driver program
# - SPARK_CLASSPATH, default classpath entries to append
# - SPARK_LOCAL_DIRS, storage directories to use on this node for shuffle and RDD data
# - MESOS_NATIVE_JAVA_LIBRARY, to point to your libmesos.so if you use Mesos

# Options read in YARN client mode
# - HADOOP_CONF_DIR, to point Spark towards Hadoop configuration files
# - SPARK_EXECUTOR_INSTANCES, Number of executors to start (Default: 2)
# - SPARK_EXECUTOR_CORES, Number of cores for the executors (Default: 1).
# - SPARK_EXECUTOR_MEMORY, Memory per Executor (e.g. 1000M, 2G) (Default: 1G)
# - SPARK_DRIVER_MEMORY, Memory for Driver (e.g. 1000M, 2G) (Default: 1G)
# - SPARK_YARN_APP_NAME, The name of your application (Default: Spark)
# - SPARK_YARN_QUEUE, The hadoop queue to use for allocation requests (Default: ‘default’)
# - SPARK_YARN_DIST_FILES, Comma separated list of files to be distributed with the job.
# - SPARK_YARN_DIST_ARCHIVES, Comma separated list of archives to be distributed with the job.

# Options for the daemons used in the standalone deploy mode
# - SPARK_MASTER_IP, to bind the master to a different IP address or hostname
# - SPARK_MASTER_PORT / SPARK_MASTER_WEBUI_PORT, to use non-default ports for the master
# - SPARK_MASTER_OPTS, to set config properties only for the master (e.g. "-Dx=y")
# - SPARK_WORKER_CORES, to set the number of cores to use on this machine
# - SPARK_WORKER_MEMORY, to set how much total memory workers have to give executors (e.g. 1000m, 2g)
# - SPARK_WORKER_PORT / SPARK_WORKER_WEBUI_PORT, to use non-default ports for the worker
# - SPARK_WORKER_INSTANCES, to set the number of worker processes per node
# - SPARK_WORKER_DIR, to set the working directory of worker processes
# - SPARK_WORKER_OPTS, to set config properties only for the worker (e.g. "-Dx=y")
# - SPARK_DAEMON_MEMORY, to allocate to the master, worker and history server themselves (default: 1g).
# - SPARK_HISTORY_OPTS, to set config properties only for the history server (e.g. "-Dx=y")
# - SPARK_SHUFFLE_OPTS, to set config properties only for the external shuffle service (e.g. "-Dx=y")
# - SPARK_DAEMON_JAVA_OPTS, to set config properties for all daemons (e.g. "-Dx=y")
# - SPARK_PUBLIC_DNS, to set the public dns name of the master or workers

# Generic options for the daemons used in the standalone deploy mode
# - SPARK_CONF_DIR      Alternate conf dir. (Default: ${SPARK_HOME}/conf)
# - SPARK_LOG_DIR       Where log files are stored.  (Default: ${SPARK_HOME}/logs)
# - SPARK_PID_DIR       Where the pid file is stored. (Default: /tmp)
# - SPARK_IDENT_STRING  A string representing this instance of spark. (Default: $USER)
# - SPARK_NICENESS      The scheduling priority for daemons. (Default: 0)

#spark- env. sh文件,它的地位就类似于hadoop中的coe-site.xml、hdfs-site.xm1等。应该说是spark中最核心的一份配置文件
#这份文件,可以对整个paxk的集群部署,各个master和worker进程的相应的行为,进行充分和细节化的配置

#【SPARK_MASTER_OPTS】
#设置mate的额外参数,使用"-Dx=y"设置各个参数 比如说export SPARK MASTER OPTS="-Dspark.deploy.defaultCores=1
#参数名 默认值 含义
#spark.deploy.retainedApplications 200 在spark web ui上最多显示多少个application的信息
#spark.deploy.retainedDrivers 200 在spark web ui上最多显示多少个drive的信息
#spark.deploy.spreadOut true 资源调度策略,spreadOut会尽量将application的executor进程分布在更多 worker上，
#适合基于hdfs文件的计算，提高数据本地化概率；非spreadOut会尽可能将executor分配到同一个worker上适合密集型作业
#spark.deploy.defaultCores 无限大 每个spark作业最多在standalone集群中使用多少个cpu core,默认是无限大
#spark.deploy.timeout 单位秒, 一个worker多少时间没有响应之后,master认为worker挂掉了

#SPARK_MASTER_IP 指定master进程所在的机器的ip地址
#SPARK_MASTER_PORT 指定master监听的端口号(默认是7077)
#SPARK_MASTER_WEBUI_PORT 指定master web ui的端口号(默认是8080)

#SPARK_LOCAL_DIRS spark的工作目录,包括了shuffle，map输出文件以及持久化到磁盘的RDD等
#SPARK_WORKER_PORT worker节点的端口号,默认是随机的
#SPARK_WORKER_WEBUI_PORT worker节点的web ui端口号,默认是8081
#SPARK_WORKER_CORES worker节点上,允许作业使用的最大cpu数录,默认是机器上所有的 cpu core
#SPARK_WORKER_MEMORY worker节点上,允许作业使用的最大内存量,格式为100m,2g等,默认最小是1g内存

#SPARK_WORKER_INSTANCES 当前机器上的worker进程数量,默认是1,可以设置成多个,但是这时一定要设置SPARK_WORKER_CORES,
#限制每个 worker的cpu数量
#SPARK_WORKER_DIR work作业的工作目录,包括了作业的日志等,默认是${SPARK_HOME}/work
#SPARK_WORKER_OPTS worker的额外参数,使用"-Dx=y"设置各个参数
#SPARK_DAEMON_MEMORY 分配给master和worker进程自己本身的内存,默认是1g
#SPARK_DAEMON_JAVA_OPTS 设置master和worker的jvm参数,使用"-Dx=y"设置
#SPARK_PUBLIC_DNS master和worker的公共dns域名,默认是没有的

#【SPARK_WORKER_OPTS】
#参数名  默认值  含义
#spark.worker.cleanup.enabled false 是否启动自动清理 worker工作目录,默认是false
#spark.worker.cleanup.interval 单位秒, 自动清理的时间间隔,默认是30分钟
#spark.worker.cleanup.appDataTtl 7*24*3600 默认将一个application的worker工作目录保留多少时间,默认是7天

#这里提示一下,大家可以观察一下,咱们的内存使用情况在没有启动spark集群之前,我们的内存使用是1个多g,启动了spark集群之后,
#就一下子耗费到2个多g（master和worker本身默认需要消耗1g），每次又执行一个作业时,可能会耗费到3个多g左右，所以大家就明白了
#为什么之前用分布式的集群,每个节点才1个g内存,根本是没有办法使用standalone模式和yarn模式运行作业的。
